
                    <!-- <div class="d-flex ">
                        <a class="btn btn-fill-out submit" href="/product">Continue Shopping</a>
                        
                        <a class="btn btn-fill-out submit ms-2" href="/cancelOrder/<%=order._id %>" >Cancel order</a>
                    </div>
                    -->






                    
<h3></h3>
<html>
  <head>
    <link rel="stylesheet" type="text/css" href="\public\assets\css\otp.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
</head>
<body>
  <!-- <div class="d-flex justify-content-center align-items-center container">
    <div class="card py-5 px-3">
        <h5 class="m-0">Mobile phone verification</h5><span class="mobile-text">Enter the code we just send on your mobile phone <b class="text-danger">+91 86684833</b></span>
        <div class="d-flex flex-row mt-5"><input type="text" class="form-control" autofocus=""><input type="text" class="form-control"><input type="text" class="form-control"><input type="text" class="form-control"></div>
        <div class="text-center mt-5"><span class="d-block mobile-text">Don't receive the code?</span><span class="font-weight-bold text-danger cursor">Resend</span></div>
    </div> -->
    <section class="container-fluid bg-body-tertiary d-block">
  <div class="row justify-content-center">
      <div class="col-12 col-md-6 col-lg-4" style="min-width: 500px;">
        <div class="card bg-white mb-5 mt-5 border-0" style="box-shadow: 0 12px 15px rgba(0, 0, 0, 0.02);">
          <div class="card-body p-5 text-center">
            <h4>Verify</h4>
            <p>Your code was sent to you via email</p>

            <!-- <div class="otp-field mb-4">
              <input type="number" />
              <input type="number"  />
              <input type="number"  />
              <input type="number"  />
              
            </div> -->
            <form action="/otp-page" method="post">
              <div id='inputs' class="otp-field mb-4" >
                <input name="otp" id='input1' type='text' maxLength="1" />
                <input name="otp" id='input2' type='text' maxLength="1" />
                <input name="otp" id='input3' type='text' maxLength="1" />
                <input name="otp" id='input4' type='text' maxLength="1" />
              </div>
              <input type="hidden" name="fullOTP" id="fullOTP" />
        
              <input  style=" background: #088178; color: white;" class="btn btn-  mt-3" value="Verify" type="submit">
            
            
              <a href="/resend-otp" class="btn btn-dark mt-3">Resend OTP</a>
            </form>

            <% if (typeof errorMessage !== 'undefined') { %>
              <p style="color: rgb(200, 3, 3);">
                  <%= errorMessage %>
              </p>
            <% } %>

           

            <p class="resend text-muted mb-0">
              Didn't receive code? <a href="">Request again</a>
            </p>
          </div>
        </div>
      </div>
    </div>
</section>
</div>
</body>
</html>



<script>
    // Get references to the OTP input fields and the hidden field
    const inputFields = document.querySelectorAll('input[name="otp"]');
    const fullOTPField = document.getElementById('fullOTP');
  
    // Add an event listener to each OTP input field
    inputFields.forEach((input, index) => {
      input.addEventListener('input', (event) => {
        // Update the hidden field with the combined value of all OTP input fields
        let fullOTP = '';
        inputFields.forEach((field) => {
          fullOTP += field.value;
        });
        fullOTPField.value = fullOTP;
      });
    });

    
    function startTimer(duration, display) {
        var timer = duration, minutes, seconds;
        var intervalId = setInterval(function () {
            minutes = parseInt(timer / 60, 10);
            seconds = parseInt(timer % 60, 10);

            minutes = minutes < 10 ? "0" + minutes : minutes;
            seconds = seconds < 10 ? "0" + seconds : seconds;

            display.textContent = minutes + ":" + seconds;

            if (--timer < 0) {
                // Timer expired, clear the interval and show the error message
                clearInterval(intervalId);
                display.textContent = "00:00";
                showErrorMessage();
            }
        }, 1000);
    }

    function showErrorMessage(message) {
        // Code to display the error message
        var errorMessageElement = document.getElementById('error-message');
        errorMessageElement.textContent = message || 'Time expired. Please try again.';
    }

    function initializeTimer() {
        var timerDuration = 60;
        var display = document.getElementById('otp-timer');
        startTimer(timerDuration, display);
    }

    window.onload = function () {
        initializeTimer();
    };

    function resendOtp() {
        // Make an AJAX request to resend OTP
        var xhr = new XMLHttpRequest();
        xhr.open("GET", "/resendOtp", true);
        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
                // Reset the timer
                initializeTimer();
            }
        };
        xhr.send();
    }
</script>




























const {formatDate,generateHr,generateTableRow}=require('../helpers/createInvoice')
const Order=require('../models/orderModel')
const PDFDocument=require('pdfkit')
const fs=require("fs")


const generateInvoice=async(req,res)=>{
    try{
        const orderId=req.params.orderId;
        console.log(orderId);

        const orders = await Order.findById(orderId)
        .populate('user')
        .populate({
            path: 'address',
            model: 'Address',
        })
        .populate({
            path: 'items.product',
            model: 'Product',
        });


        const doc=new PDFDocument();

        const fileName=`invoice_${orderId}.pdf`;

        res.setHeader('content-Type','application/pdf');
        res.setHeader('Content-Disposition',`attatchment;filename="${fileName}`)

        doc.pipe(res);

        doc

        .fillColor("#444444") // Corrected 'fillerColor' to 'fillColor'
        .fontSize(20) // Fixed method call to 'fontSize'
        .text('ZoneApple.com', 200, 50, { align: "right" })
        .text("682301", 200, 65, { align: "right" })
        .text("Maradu ", 200, 80, { align: "right" })
        .moveDown();

        doc 
        .fillColor("#444444") // Corrected 'fillerColor' to 'fillColor'
        .fontSize(20) // Fixed method call to 'fontSize'
        .text("Invoice", 50, 160);
        generateHr(doc, 185);
         const customerInformationTop=200;

         doc.fontSize(10)
         .text("Invoice Number:",50,customerInformationTop)
         font("helvetica-Bold")
         .text(orders._id,150,customerInformationTop +15)
         .text(formatDate(new Date()),150,customerInformationTop +15 )
         .text("Total Amount(Rs):",50,customerInformationTop + 30)
         .text(
            `Rs ${orders.totalAmount}`,150,customerInformationTop + 30
         )
         .font("Helvetica-Bold")
         .text(orders.address.name,300,customerInformationTop)
         .font("Helvetica")
         .text(orders.address.houseName,300,customerInformationTop + 15)
         .text(
            `${orders.address.city}, ${orders.address.state}, India`,
            300,
            customerInformationTop + 30
        )
        .moveDown();

    generateHr(doc, 252);

    const invoiceTableTop = 330;

    doc.font("Helvetica-Bold");
    generateTableRow(
        doc,
        invoiceTableTop,
        "Item",
        "Quantity",
        "Line Total"
    );
    generateHr(doc, invoiceTableTop + 20);
    doc.font("Helvetica");

    let position = 0;
    for (let i = 0; i < orders.items.length; i++) {
        position = invoiceTableTop + (i + 1) * 30;
        generateTableRow(
            doc,
            position,
            orders.items[i].product.name,
            orders.items[i].quantity,
            `Rs ${orders.items[i].product.discountPrice}`,
        );
        
    }

    generateHr(doc, position + 20); 

    const totalPricePosition = position + 40; 
    
    doc
        .font("Helvetica")
        .text("Total Amount (Rs) + shipping charges:", 50, totalPricePosition)
        .text(`Rs ${orders.orginalPrice}`, 250, totalPricePosition)
        .text("Coupon Code:", 50, totalPricePosition + 15)
        .text(`${orders.couponCode}`, 250, totalPricePosition + 15)
        .text("Coupon Discount (Rs):", 50, totalPricePosition + 30)
        .text(`Rs ${orders.couponDiscount}`, 250, totalPricePosition + 30);
    
    const totalWithDiscountPosition = totalPricePosition + 60; 
    
    doc
        .font("Helvetica-Bold")
        .text("Total  + shipping charges:", 50, totalWithDiscountPosition)
        .text(`Rs ${orders.totalAmount}`, 250, totalWithDiscountPosition); 
    
    doc.end();
} catch (err) {
    console.error(err);
    res.status(500).send('Error generating the invoice');
}
}
 
module.exports = {
generateInvoice
}
        
    




    
  


/////////////////////helper


function generateHr(doc,y){
  doc.strockColor('#aaaaaa')
  .lineWidth(1)
  .moveTo(50,y)
  .lineTo(550,y)
  .strock();
         
}

function formatDate(date){
  const day=date.getDate();
  const month=date.getMonth()+1;
  const year=date.getFullYear();

  return year + '/'+ month +'/' + day
}

function generateTableRow(doc,y,item,quantity,lineTotal){
  const itemMaxWidth=250;
  const itemFontSize=10;

  // const lines=doc
  // itemFontSize(itemFontSize)
  // .text(item,50,y,{width:itemMaxWidth,align:"left",lineBreak:true});
  const lines = doc
  .fontSize(itemFontSize) // Corrected the method call
  .text(item, 50, y, { width: itemMaxWidth, align: "left", lineBreak: true });

  const itemHeight=lines.length* itemFontSize +30;
  doc
  .text(quantity,370,y,{width:90,align:"right"})
  .text(lineTotal,0,y,{align:"right"})

  const rowHeight=Math.max(itemHeight,40);
  return rowHeight;

}


function generateTableRowSales(doc,y,item,quantity,userid,date,lineTotal){
  const itemMaxWidth=150;
  const itemFontSize=6;

  const lines=doc
  .fontSize(itemFontSize)
  .text(item,50,y,{width:itemMaxWidth,align:'left',lineBreak:true});

  const itemHeight=lines.length*itemFontSize;

  doc

  .text(quantity,150,y,{width:90,alighn:"right"})
  .text(userid,250,y,{width:90,align:"right"})
  .text(date,350,y,{width:90,alighn:"right"})
  .text(lineTotal,0,y,{align:"right"})


  // const rowHeight=Max.max(itemHeight,40);
  const rowHeight = Math.max(itemHeight, 40);

  return rowHeight;
}

module.exports={
  formatDate,
  generateHr,
  generateTableRow,
  generateTableRowSales

}





<form method="post" action="/postAddress?id=<%= user._id.toString()%>" style="width: 70%; padding-left:25%; " >
  <div class="form-group">
      <input type="text" required="" name="name" placeholder="Name">
  </div>
  <div class="form-group">
      <input type="text" required="" name="houseName" placeholder="HouseName">
  </div>
  <div class="form-group">
      <input type="text" required="" name="street" placeholder="Street">
  </div>
  <div class="form-group">
      <input required="" type="text" name="city" placeholder="City">
  </div>
  <div class="form-group">
      <input required="" type="text" name="state" placeholder="State">
  </div>
  <div class="form-group">
      <input required="" type="text" name="pinCode" placeholder="Pincode">
  </div>
  <div class="form-group">
      <input required="" type="text" name="phone" placeholder="Phone">
  </div>
                    
  <div class="col-md-12 "style="width: 70%; padding-left:35%;">
      <button type="submit" class="btn btn-fill-out submit" name="submit" value="Submit">SAVE</button>
  </div>
</form>







<script>
  // JavaScript code for the timer and resend functionality
  function startTimer(duration, display) {
      var timer = duration;
      var minutes, seconds;
      var intervalId = setInterval(function () {
          minutes = parseInt(timer / 60, 10);
          seconds = parseInt(timer % 60, 10);
          minutes = minutes < 10 ? "0" + minutes : minutes;
          seconds = seconds < 10 ? "0" + seconds : seconds;
          display.textContent = minutes + ":" + seconds;
          if (--timer < 0) {
              clearInterval(intervalId);
              display.textContent = "00:00";
              showErrorMessage();
          }
      }, 1000);
  }

  function showErrorMessage(message) {
      var errorMessageElement = document.getElementById('error-message');
      errorMessageElement.textContent = message || 'Time expired. Please try again.';
  }

  function initializeTimer() {
      var timerDuration = 60;
      var display = document.getElementById('otp-timer');
      startTimer(timerDuration, display);
  }

  window.onload = function () {
      initializeTimer();
  };

  
</script>